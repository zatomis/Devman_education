from aiogram import Router, F, Bot
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StatesGroup, State

import logging
import os
# from datetime import datetime
from datetime import datetime
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto
from aiogram.filters import Command
from asgiref.sync import sync_to_async
from environs import Env

# from conf.settings import BASE_DIR
# from shopbot.models import Client, Advertisement, Staff, Bouquet, Order
from registration.management.commands.bot.user_keyboards import get_catalog_keyboard
from registration.management.commands.bot.user_menu import *
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from registration.models import *

from registration.management.commands.bot.user_keyboards import (
    get_catalog_keyboard,
    get_occasions_keyboard,
    get_price_ranges_keyboard,
    get_order_keybord
)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d - %(levelname)-8s - %(asctime)s - %(funcName)s - %(name)s - %(message)s'
)

logger = logging.getLogger(__name__)

env: Env = Env()
env.read_env()

bot: Bot = Bot(token=env('TG_BOT_API'), parse_mode='HTML')

router = Router()


class OrderState(StatesGroup):
    user_occasion = State()
    user_name = State()
    user_adress = State()
    user_date_time_order = State()
    user_phonenumber_order = State()
    user_phonenumber_consultation = State()



@router.message(Command(commands=["start"]))
async def start_command_handler(message: Message):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î - –¥–æ–±–∞–≤–ª—è—é
    """
    user_id = await sync_to_async(DevmanUser.objects.filter(telegram_id=int(message.from_user.id)).first)()
    if not user_id:
        user_id = DevmanUser(telegram_id=int(message.from_user.id), first_name=message.from_user.first_name, created_at=datetime.datetime.now())
        await sync_to_async(user_id.save)()
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—á–µ–±–Ω—ã–π –±–æ—Ç DEVMAN', reply_markup=main_menu)
    else:
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}\n–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è!!!', reply_markup=main_menu)


@router.callback_query(F.data.startswith('occasion_'))
async def get_occasion_handler(callback: CallbackQuery, state: FSMContext):
    logger.info(f'start occasion handler - {callback.data}')
    occasion = callback.data.split('_')[-1]
    if occasion == '10':
        await callback.message.answer('–í –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ø–æ–≤–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞ –±—É–∫–µ—Ç–∞',
                                      reply_markup=ReplyKeyboardRemove()
                                      )
        await state.set_state(OrderState.user_occasion)
    else:
        await state.update_data(occasion=occasion, user_occasion=None)
        await callback.message.answer('–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?',
                                      reply_markup=await get_price_ranges_keyboard())


@router.message(OrderState.user_occasion)
async def get_user_occasion_handler(message: Message, state: FSMContext):
    await state.update_data(occasion='10', user_occasion=message.text)
    await state.clear()
    await message.answer('–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?',
                         reply_markup=await get_price_ranges_keyboard())

@router.callback_query(F.data.startswith == 'price_')
async def get_price_range_handler(callback: CallbackQuery):
    await callback.message.answer('–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?',
                                  reply_markup=await get_price_ranges_keyboard())



@router.callback_query(F.data.startswith('price_'))
async def send_bouquet_handler(callback: CallbackQuery, state: FSMContext):
    logger.info(f'start send_bouquet_handler')
    bouquet = await sync_to_async(Bouquet.objects.all().first)()
    image_path = os.path.join(BASE_DIR, bouquet.image.url.lstrip('/'))
    logger.info(f'picture path {image_path}')
    photo = FSInputFile(image_path)
    await bot.send_photo(
        chat_id=callback.from_user.id,
        caption=f'{bouquet.name.upper()}\n\n'
        f'<b>üí° –°–º—ã—Å–ª –±—É–∫–µ—Ç–∞</b>:\n\n{bouquet.meaning}\n\n'
        f'<b>üí∞ {bouquet.price} —Ä—É–±.</b>',
        photo=photo,
        reply_markup=await get_catalog_keyboard(bouquet.pk)
    )


@router.message(Command(commands=['catalog']))
async def show_start_catalog_handler(message: Message):
    bouquet = await sync_to_async(Bouquet.objects.all().first)()
    image_path = os.path.join(BASE_DIR, bouquet.image.url.lstrip('/'))
    logger.info(f'picture path {image_path}')
    photo = FSInputFile(image_path)
    await bot.send_photo(
        chat_id=message.from_user.id,
        caption=f'{bouquet.name.upper()}\n\n'
                f'<b>üí° –°–º—ã—Å–ª –±—É–∫–µ—Ç–∞</b>:\n\n{bouquet.meaning}\n\n'
                f'<b>üí∞ {bouquet.price} —Ä—É–±.</b>',
        photo=photo,
        reply_markup=await get_catalog_keyboard(bouquet.id)
    )


@router.callback_query(F.data.startswith('catalog_'))
async def show_more_catalog_handler(callback: CallbackQuery):
    bouquet_id = callback.data.split('_')[-1]
    logger.info(f'bouquet_id {bouquet_id}')
    bouquet = await sync_to_async(Bouquet.objects.filter(pk=bouquet_id).first)()
    image_path = os.path.join(BASE_DIR, bouquet.image.url.lstrip('/'))
    logger.info(f'picture path {image_path}')
    photo = FSInputFile(image_path)
    await bot.edit_message_media(chat_id=callback.from_user.id,
                                 message_id=callback.message.message_id,
                                 media=InputMediaPhoto(media=photo,
                                                       caption=f'{bouquet.name.upper()}\n\n'
                                                               f'<b>üí° –°–º—ã—Å–ª –±—É–∫–µ—Ç–∞</b>:\n\n{bouquet.meaning}\n\n'
                                                               f'<b>üí∞ {bouquet.price} —Ä—É–±.</b>'),
                                 reply_markup=await get_catalog_keyboard(bouquet.id))


@router.message(F.text == "–û Devman...")
async def show_start_order(message: Message):
    await bot.send_message(message.from_user.id, str(message.from_user.id))


@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def show_main_menu(message: Message):
    await bot.send_message(message.from_user.id, '–∏ —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç –æ—Ç –±–æ—Ç–∞...', reply_markup=main_menu)

@router.message(F.text == "–û Devman...")
async def create_order(message: Message):
    await message.answer('https://dvmn.org/')

@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Ä–µ–º—è")
async def create_order(message: Message):
     #ODO —Ç—É—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–æ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–µ–Ω–∏–∫, –ø–æ–∫–∞ —ç—Ç–æ–≥–æ –Ω–µ—Ç
    await bot.send_message(message.from_user.id, '–∏ —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç –æ—Ç –±–æ—Ç–∞...', reply_markup=main_menu)

    await message.answer('https://dvmn.org/')


@router.message(F.text.startswith('!'))
async def get_new_order_id(message: Message):
    id = message.text.split('-')[-1].replace('[','').replace(']','')
    await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏) –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ - –û—Ç–º–µ–Ω–µ–Ω", reply_markup=order_main_menu)
    await sync_to_async(Order.objects.filter(pk=id).update)(status="canceled")


@router.message(F.text == "–ü—Ä–∏–Ω—è—Ç—å '–ù–æ–≤—ã–π' –≤ —Ä–∞–±–æ—Ç—É")
async def change_new_type(message: Message):
    builder = ReplyKeyboardBuilder()
    async for order in Order.objects.filter(status='new').order_by('delivery_date'):
        builder.add(types.KeyboardButton(text=f"*{order.contact_name}\n—Ç.{order.contact_phone}-[{order.id}]", callback_data="*"))
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:",reply_markup=builder.as_markup(resize_keyboard=True))

@router.message(F.text == "–£–∫–∞–∑–∞—Ç—å - –î–æ—Å—Ç–∞–≤–ª–µ–Ω")
async def change_new_type(message: Message):
    builder = ReplyKeyboardBuilder()
    async for order in Order.objects.filter(status='processing').order_by('delivery_date'):
        builder.add(types.KeyboardButton(text=f"@{order.contact_name}\n—Ç.{order.contact_phone}-[{order.id}]", callback_data="@"))
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑",reply_markup=builder.as_markup(resize_keyboard=True))

@router.message(F.text == "–£–∫–∞–∑–∞—Ç—å - –û—Ç–º–µ–Ω–µ–Ω")
async def change_new_type(message: Message):
    builder = ReplyKeyboardBuilder()
    async for order in Order.objects.filter(status='processing').order_by('delivery_date'):
        builder.add(types.KeyboardButton(text=f"!{order.contact_name}\n—Ç.{order.contact_phone}-[{order.id}]", callback_data="!"))
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ —É –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–º–µ–Ω–µ–Ω –∑–∞–∫–∞–∑",reply_markup=builder.as_markup(resize_keyboard=True))

@router.message(F.text == "–ó–∞–∫–∞–∑—ã - –í —Ä–∞–±–æ—Ç–µ")
async def change_new_type(message: Message):
    builder = ReplyKeyboardBuilder()
    async for order in Order.objects.filter(status='processing').order_by('delivery_date'):
        builder.add(types.KeyboardButton(text=f"#{order.contact_name}\n—Ç.{order.contact_phone}-[{order.id}]", callback_data="#"))
    builder.adjust(1)
    await message.answer("–ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ\n–£–∫–∞–∂–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",reply_markup=builder.as_markup(resize_keyboard=True))

@router.message(F.text.startswith('#'))
async def get_new_order_id(message: Message):
    id = message.text.split('-')[-1].replace('[','').replace(']','')
    await bot.send_message(message.from_user.id, f"–£–∫–∞–∂–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏) –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞", reply_markup=order_main_menu)
    order_detail = await sync_to_async(Order.objects.filter(pk=id).first)()
    await message.answer(f"–ó–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞ ‚Ññ"
                         f"{order_detail.id} –°—Ç–∞—Ç—É—Å [{order_detail.status}]\n"
                         f"–°–æ–∑–¥–∞–Ω {order_detail.created_at}. –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ {order_detail.delivery_date}\n"
                         f"{order_detail.delivery_address} {order_detail.contact_phone} {order_detail.contact_name}")


@router.callback_query(F.data.startswith('show_composition_'))
async def show_composition_handler(callback: CallbackQuery):
    bouquet_id = callback.data.split('_')[-1]
    bouquet = await sync_to_async(Bouquet.objects.filter(pk=bouquet_id)
                                  .first)()
    composition_flowers = await sync_to_async(FlowerComposition.objects.select_related('flower')
                                              .filter)(bouquet=bouquet)
    flowers = []
    async for composition_flower in composition_flowers:
        flowers.append(f'{composition_flower.flower.name} - {composition_flower.quantity} —à—Ç.\n')
    flowers = ''.join(flowers)
    composition_greeneries = await sync_to_async(GreeneryComposition.objects.select_related('greenery')
                                                 .filter)(bouquet=bouquet)
    greeneries = []
    async for composition_greenery in composition_greeneries:
        greeneries.append(f'{composition_greenery.greenery.name} - {composition_greenery.quantity} —à—Ç./—É–ø–∞–∫.\n')
    greeneries = ''.join(greeneries)
    image_path = os.path.join(BASE_DIR, bouquet.image.url.lstrip('/'))
    logger.info(f'picture path {image_path}')
    photo = FSInputFile(image_path)
    await bot.edit_message_media(chat_id=callback.from_user.id,
                                 message_id=callback.message.message_id,
                                 media=InputMediaPhoto(media=photo,
                                                       caption=f'{bouquet.name.upper()}\n\n'
                                                               f'<b>üåπ –°–æ—Å—Ç–∞–≤ –±—É–∫–µ—Ç–∞</b>:\n\n'
                                                               f'{flowers}\n{greeneries}\n'
                                                               f'–£–ø–∞–∫–æ–≤–∫–∞ - {bouquet.wrapping}\n\n'
                                                               f'<b>üí∞ {bouquet.price} —Ä—É–±.</b>'),
                                 reply_markup=await get_catalog_keyboard(bouquet.id)
                                 )


@router.callback_query(F.data == 'start_order')
async def show_order_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Order.user_name)
    await callback.message.answer('üë§ –£–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –∏–º—è',
                                  reply_markup=ReplyKeyboardRemove()
                                  )


@router.message(OrderState.user_name)
async def show_adress_handler(message: Message, state: FSMContext):
    await state.set_state(OrderState.user_adress)
    await message.answer('üè† –£–∫–∞–∂–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å',
                         reply_markup=ReplyKeyboardRemove()
                         )


@router.message(OrderState.user_adress)
async def show_datetime_handler(message: Message, state: FSMContext):
    await state.set_state(Order.user_date_time_order)
    await message.answer('‚è∞ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏',
                         reply_markup=ReplyKeyboardRemove()
                         )


@router.message(OrderState.user_date_time_order)
async def show_phonenumber_handler(message: Message, state: FSMContext):
    await state.set_state(Order.user_phonenumber_order)
    await message.answer('üì≤ –£–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                         reply_markup=ReplyKeyboardRemove()
                         )


@router.message(OrderState.user_phonenumber_order)
async def show_phonenumber_handler(message: Message):
    await message.answer(
        text='–°–ø–∞—Å–∏–±–æ, –∑–∞ –∑–∞–∫–∞–∑ üëç –ù–∞—à –∫—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n\n'
             '<b>–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ? '
             '–ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞</b>',
        reply_markup=await get_order_keybord(),
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'all_bouquets')
async def show_all_bouquets_handler(callback: CallbackQuery):
    bouquet = await sync_to_async(Bouquet.objects.all().first)()
    image_path = os.path.join(BASE_DIR, bouquet.image.url.lstrip('/'))
    logger.info(f'picture path {image_path}')
    photo = FSInputFile(image_path)
    await bot.send_photo(
        chat_id=callback.from_user.id,
        caption=f'{bouquet.name.upper()}\n\n'
                f'<b>üí° –°–º—ã—Å–ª –±—É–∫–µ—Ç–∞</b>:\n\n{bouquet.meaning}\n\n'
                f'<b>üí∞ {bouquet.price} —Ä—É–±.</b>',
        photo=photo,
        reply_markup=await get_catalog_keyboard(bouquet.id)
    )


@router.callback_query(F.data == 'consultation')
async def show_consultation_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Order.user_phonenumber_consultation)
    await callback.message.answer('üì≤ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à —Ñ–ª–æ—Ä–∏—Å—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –í–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç!',
                                  reply_markup=ReplyKeyboardRemove()
                                  )


@router.message(OrderState.user_phonenumber_consultation)
async def show_phonenumber_consultation_handler(message: Message):
    await message.answer(
        text='–§–ª–æ—Ä–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!\n\n'
             '–ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –≥–æ—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ‚òùÔ∏è',
        reply_markup=await show_all_bouquets_handler(message))
